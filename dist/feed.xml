<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prior Art</title>
    <link>https://priorart.dev</link>
    <description>Build better software by learning the foundations. Stop re-inventing the wheel so you can focus on your app.</description>
    <lastBuildDate>Tue, 9 Feb 2021 21:38:53 -0500</lastBuildDate>
    <atom:link href="https://priorart.dev/feed.xml" rel="self" type="application/rss+xml"/>
    <generator>Morphy v0.0</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
      <item>
        <title>Think of a thing's identity as it's value, not it's container</title>
        <description>&lt;p&gt;Writing code that works is hard. I've been exploring things that make software complex in an attempt to learn how to write better code. I guess &amp;quot;better&amp;quot; is subjective, but in this case I mean &amp;quot;easier to change&amp;quot; and &amp;quot;with fewer bugs&amp;quot;. &lt;a href=&quot;/articles/how-state-makes-software-complex/&quot;&gt;State&lt;/a&gt; is one big factor that makes software complex. Most code that does anything useful needs state, though.&lt;/p&gt;
&lt;p&gt;How we model that state can make a big difference in how easy or hard it is to understand code. It really comes down to reference vs. value equality semantics, but those are abstract terms and ways of thinking about things that nobody really talks about in real life.&lt;/p&gt;
&lt;p&gt;It's easy to gloss over this topic in a conversation about computery things, but it's one that's really worth thinking about a bit because it can have a big impact on our ability to write code that works.&lt;/p&gt;
&lt;h2&gt;Reference semantics&lt;/h2&gt;
&lt;p&gt;In most of the popular languages, each object is a unique, distinct thing, regardless of its current state. Take the example of dates in JavaScript:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;gt; date = new Date()                // Thu Jan 28 2021 21:54:34 GMT-0500 (EST)
&amp;gt; date.setDate(date.getDate() + 1) // 1611975274726
&amp;gt; date                             // Fri Jan 29 2021 21:54:34 GMT-0500 (EST)
&amp;gt; date === date                    // true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We make a new date, then change the internal state of that date, setting its current value to tomorrow, yet we still say it's the same date.&lt;/p&gt;
&lt;p&gt;The thing is, it's not the same date. January 28th &lt;em&gt;is not the same&lt;/em&gt; as January 29th, but the way we describe objects in most programming languages forces us to wrap our heads around this unnatural way of thinking about what something is.&lt;/p&gt;
&lt;p&gt;The flip side is equally confusing -- when you look at things that seem like they should be equal but aren't. Like in JavaScript again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;[1, 2, 3] === [1, 2, 3] // false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see that  &lt;code&gt;[1, 2, 3]&lt;/code&gt; is actually the same as &lt;code&gt;[1, 2, 3]&lt;/code&gt;, and there are a lot of situations where it would be convenient to be able to check that programatically, but in most languages they're not actually equivalent, because each thing (array of 1, 2, 3, in this case) is a unique entity. The &lt;em&gt;identity&lt;/em&gt; of a thing is defined as the container, the object that holds all the attributes. The current value of those attributes does not affect an object's identity in these languages.&lt;/p&gt;
&lt;h2&gt;Re-inventing equality&lt;/h2&gt;
&lt;p&gt;Thinking of identity this way forces us to re-invent what it means for things to be equal. In languages that refer to a container of attributes as a thing's identity, we have to re-define what equality means in some domain-specific sense for each new type of object. In order to check whether two obejcts are equal, you have to write extra code to check whether the &lt;em&gt;current value&lt;/em&gt; of their attributes are equal. That can add up to a lot of extra code!&lt;/p&gt;
&lt;p&gt;It also adds the issue of having to think about time to our code, because in this world whether two things are equal or not depends on the values of their attributes &lt;em&gt;at the instant&lt;/em&gt; you check, but that could change. To check whether two things are equal you have to effectively pause the universe and grab a snapshot. All of this adds unnecessary complexity to code. It's unnecessary because it's imposed by the language, not a consequence of logical constraints.&lt;/p&gt;
&lt;h2&gt;Unwrap your data and think in values instead&lt;/h2&gt;
&lt;p&gt;We can get rid of this entire category of problem by thinking about a thing's identity as it's &lt;em&gt;value&lt;/em&gt; directly, intead of wrapping it in a container and calling that the identity. There are a lot of languages where the equivalent of &lt;code&gt;[1, 2, 3] === [1, 2, 3]&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; true, as we can intuitively see that it is.&lt;/p&gt;
&lt;p&gt;Working with data directly like this is much easier to reason about and removes whole categories of problems to free up your mental bandwidth to work on your actual app, not problems introduced by your language.&lt;/p&gt;
&lt;p&gt;You never have to care again about what fields to compare to see if things are equal. This also solves the time problem, because values are inherently immutable. 2 is always 2, it will never be different no matter how much later you check. This means you no longer have to care about &lt;em&gt;when&lt;/em&gt; objects change in your code -- if you unwrap the objects and just work with values directly, it suddenly becomes possible to zero in on one tiny piece of your code and stop caring about how all the rest of it might affect the value you're currently trying to do something with.&lt;/p&gt;
&lt;h2&gt;Reference semantics add unnecessary complexity&lt;/h2&gt;
&lt;p&gt;The biggest win with writing code this way -- using naked, immutable data structures -- is that it reduces the complexity of your whole codebase. The value of a given thing is always transparent, and never changes over time. This removes whole classes of complexity that we can just stop caring about. You never have to worry again about what other methods might sneakily change the thing you're working with. And you don't have to care about &lt;em&gt;when&lt;/em&gt; things happen anymore, either. You can always know that whatever value you're dealing with is static for the purposes of your current context.&lt;/p&gt;
&lt;p&gt;Clojure is one language that is designed like this by default, but it's possble to write code this way in many languages. Give it a try and see what you think!&lt;/p&gt;
</description>
        <pubDate>Tue, 9 Feb 2021 00:00:00 -0500</pubDate>
        <link>https://priorart.dev/articles/identity-as-value/</link>
        <guid isPermaLink="true">https://priorart.dev/articles/identity-as-value/</guid>
      </item>
      <item>
        <title>How state makes software complex</title>
        <description>&lt;p&gt;What makes large codebases so hard to reason about, and so hard to extend? I really want to find out because I'm tired of losing my mind working on them. One paper I love called &amp;quot;&lt;a href=&quot;http://curtclifton.net/papers/MoseleyMarks06a.pdf&quot;&gt;Out of the Tar Pit&lt;/a&gt;&amp;quot;, by Ben Moseley and Peter Marks, argues that state is the main source of complexity in large software systems. This article is an overview of a couple of the ideas from that paper, along with some discussion about how we might conceptually think about necessary state in software in order to improve its overall quality.&lt;/p&gt;
&lt;h2&gt;How does state cause complexity?&lt;/h2&gt;
&lt;p&gt;The main issue with maintaining state in a program is that it quickly leads to a proliferation of different internal conditions that can affect the output. The more state there is, the more possible combinations it can be in, the harder it is to predict and wrap our heads around what the whole system is going to do with a given input. Every new piece of state introduced into a system dramatically increases the total number of possible states the whole thing can have, and this number quickly exceeds the capacity of our brains to conceptualize it all at once, which leads us to write code that behaves in unexpected ways. Bugs!&lt;/p&gt;
&lt;p&gt;When the output of a program depends not only on its inputs, but also on its &lt;em&gt;current internal state&lt;/em&gt;, it is inherently unreliable because we cannot guarantee that the inputs we're giving it will always produce the same result. This is how we end up with systems that behave in unexpected ways. Most programs need at least some state, though, so how can we deal with it?&lt;/p&gt;
&lt;h2&gt;Hiding state does not count as dealing with it&lt;/h2&gt;
&lt;p&gt;One classical approach to managing state is encapsulation -- breaking state down into small pieces and putting different parts inside different classes or objects. As Rich Hickey says, though, putting the mess into a container does not fix the problem. It just means &lt;a href=&quot;https://www.youtube.com/watch?v=dGVqrGmwOAw&amp;amp;t=1322&quot;&gt;you're in charge of that mess now&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Remember the fundamental problem causing complexity is that stateful programs have too many possible internal states which affect their output in ways that are opaque and therefore difficult to understand. Separating the state into pieces and regulating access to it through methods doesn't solve that. There is nothing to stop multiple methods from accessing the same bit of state, or even multiple different objects calling those methods and manipulating the internal state of some other object. With this approach, the behaviour of the program as a whole still ultimately depends on the current internal state of its components.&lt;/p&gt;
&lt;p&gt;Most languages do support things like private methods and attributes and encourage best practices like &lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;loose coupling&lt;/a&gt;, but as Murphy's law says, &amp;quot;anything that can go wrong will&amp;quot;. Whatever ways there are in a given language to manipulate the internal state of objects will eventually be used. Good practices are never enough to save us from ourselves.&lt;/p&gt;
&lt;h2&gt;Ignoring state does not count as dealing with it&lt;/h2&gt;
&lt;p&gt;Another classical approach to managing state is basically to reject it -- insisting that useful programs can be modeled as pure (mathematical) functions, i.e. ones where the only thing affecting the output is the input. This is a nice way to think about computation in many ways, but at the end of the day it's not pragmatic. It ultimately just kicks the can down the road.&lt;/p&gt;
&lt;p&gt;The vast majority of programs/systems/apps exist to be used by people, and those people are not all identical, so many of them want to use those systems in subtly different ways. This is one reason why most programs need to deal with at least some state.&lt;/p&gt;
&lt;p&gt;One typical approach to managing user input or other essential state in programs made mostly (or only) of functions is to add arguments to all the functions that would normally store or access the internal state of the program, effectively passing some initial state to the entry point of the system and threading that state all the way through.&lt;/p&gt;
&lt;p&gt;In many such programs these extra arguments end up being large compound values, acting effectively as a single pool of global variables, which in the end can be just as confusing. This is still a huge improvement over the encapsulation approach because at least each &lt;em&gt;individual&lt;/em&gt; function can be more easily understood in isolation. It is ultimately simpler to understand something when all of its inputs are explicit and transparent. But, if one of those inputs is a huge map of stuff where only a slice is actually relevant, we're not a whole lot better off in the end.&lt;/p&gt;
&lt;h2&gt;Hidden, implicit, mutable state is a major source of complexity&lt;/h2&gt;
&lt;p&gt;These two approaches to dealing with state reveal some characteristics of the kinds of state that are fundamentally bad to have in a system (because they increase its complexity, which makes it harder to reason about, which makes it less reliable).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hidden (or implicit) state&lt;/strong&gt; makes programs more complex because we have to do extra work to figure out what the output is going to be. The mental overhead of figuring out how this hidden state affects the output can quickly become overwhelming and make systems impossible to understand.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mutable state&lt;/strong&gt; makes programs more complex because we cannot guarantee the state will be what we expect at any given time. We cannot trust best practices alone to isolate state mutation to only the right places, so we can never be certain what the values of mutable properties are going to be. This also means we have to pause the universe in order to read mutable state, which fundamentally breaks out model time in programs that have it. But that's a topic for another day.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Make state explicit and immutable to make less complex software&lt;/h2&gt;
&lt;p&gt;There are obviously loads of things that make programs complex. But state is a big one, specifically hidden, implicit, mutable state.&lt;/p&gt;
&lt;p&gt;In any system where the outcome of running some code depends on the internal state of the system, you &lt;em&gt;have to know&lt;/em&gt; the state of that system &lt;em&gt;at the moment&lt;/em&gt; the code runs in order to know what the output will be. And the more parts of a system you have to pull in to your mental model just to understand how one small piece works, the harder it is to write code that works.&lt;/p&gt;
&lt;p&gt;To write less complex (and therefore more reliable) software, make implicit state explicit and use immutable data structures. This minimizes the number of things you have to account for when looking at a single method/function, which makes it easier to write better software.&lt;/p&gt;
&lt;p&gt;I daydream about a world where most software is written in &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_programming_languages_by_type#Functional_languages&quot;&gt;languages&lt;/a&gt; that enforce these constraints by default, but in the meantime there are libraries in many popular programming languages (like &lt;a href=&quot;https://gist.github.com/jlongster/bce43d9be633da55053f&quot;&gt;JavaScript&lt;/a&gt;, &lt;a href=&quot;http://www.functionaljava.org/&quot;&gt;Java&lt;/a&gt;, and &lt;a href=&quot;https://pypi.org/project/immutables/&quot;&gt;Python&lt;/a&gt;) that can help.&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Jan 2021 00:00:00 -0500</pubDate>
        <link>https://priorart.dev/articles/how-state-makes-software-complex/</link>
        <guid isPermaLink="true">https://priorart.dev/articles/how-state-makes-software-complex/</guid>
      </item>
  </channel>
</rss>

